<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AElFTkSuQmCC
</value>
  </data>
</root>